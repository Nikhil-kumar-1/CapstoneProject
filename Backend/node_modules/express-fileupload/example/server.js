const express = require('express');
const fileUpload = require('express-fileupload'); // Changed from '../lib/index' to 'express-fileupload'
const rateLimit = require('express-rate-limit');
const app = express();
app.use(csrf()); //Provide protection against CSRF
app.disable('x-powered-by'); // Disable some properties
const path = require('path');
const escapeHtml = require('escape-html');
const fs = require('fs');

const PORT = 8000;

// Rate limiting configuration (example: limit each IP to 100 requests per hour)
const limiter = rateLimit({
  windowMs: 60 * 60 * 1000, // 1 hour
  max: 100, // limit each IP to 100 requests per windowMs
  message: 'Too many requests from this IP, please try again later.',
});

// Apply rate limiter to all requests
app.use(limiter);

// Serve static files from the '/form' directory
app.use('/form', express.static(path.join(__dirname, 'index.html')));

// Enable file upload middleware with default options
app.use(fileUpload());

app.get('/ping', function(req, res) {
  res.send('pong');
});

app.post('/upload', function(req, res) {
  let sampleFile;
  let uploadPath;

  if (!req.files || Object.keys(req.files).length === 0) {
    res.status(400).send('No files were uploaded.');
    return;
  }

  sampleFile = req.files.sampleFile;

  // Ensure the filename is safe
  const filename = sampleFile.name.replace(/^.*[\\\/]/, '');

  // Define the upload directory
  const uploadDirectory = path.resolve(__dirname, 'uploads');

  // Ensure the uploadPath is within the uploadDirectory
  uploadPath = path.join(uploadDirectory, filename);

  // Check if the resolved uploadPath starts with the uploadDirectory
  if (!uploadPath.startsWith(uploadDirectory + path.sep)) {
    // If the resolved uploadPath is outside the uploadDirectory, reject the request
    return res.status(400).send('Invalid file path.');
  }

  // Perform an additional check to ensure the file does not exist before moving it
  if (fs.existsSync(uploadPath)) {
    return res.status(400).send('File already exists.');
  }

  // deepcode ignore PT: <please specify a reason of ignoring this>
  sampleFile.mv(uploadPath, function(err) {
    if (err) {
      // Sanitize the err variable
      const sanitizedErr = escapeHtml(err.toString());
      return res.status(500).send(sanitizedErr);
    }

    // Sanitize the uploadPath before sending it in the response
    const sanitizedPath = escapeHtml(uploadPath);
    res.send('File uploaded to ' + sanitizedPath);
  });
});

app.listen(PORT, function() {
  console.log('Express server listening on port ', PORT);
});
